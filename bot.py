"""
–ë–æ—Ç –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å
–ø–æ–ª–µ–∑–Ω–æ–µ –¥–µ–ª–æ, –¥–ª—è —Å–µ–±—è –∏–ª–∏ –¥–ª—è –æ–∫—Ä—É–∂–∞—é—â–∏—Ö, —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —Å –ø–æ–ª–Ω–æ–π
–æ—Ç–¥–∞—á–µ–π –∏ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏–π. B –ø—Ä–∏–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫–∏–º –±—ã –æ–Ω –Ω–∏ –±—ã–ª.

–ü–æ–º–æ–≥–∞–µ—Ç –¥–µ–ª–∞—Ç—å, —Ç–æ —á—Ç–æ –∏–Ω–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è –æ—Ç–ª–æ–∂–∏—Ç—å, –±—ã—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω—ã–º,
–¥–µ–ª–∞—Ç—å —Ç–æ –æ —á–µ–º –º–æ–∂–Ω–æ —Å–ª—É—á–∞–π–Ω–æ –∑–∞–±—ã—Ç—å.

–≠—Ç–æ —Ç–∞–∫–æ–π GTD - –ü—Ä–µ–¥—Å—Ç–∞–≤—å —Å–µ–±–µ —Ç–≤–æ–∏ –¥–µ–ª–∞, —ç—Ç–æ –∫–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç,
–±–æ—Ç –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –µ—ë –∏ –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–±–µ –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É.

–ê–≤—Ç–æ—Ä: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì–æ—Ä–ª–æ–≤

Todo:
    - –ï—Å–ª–∏ –¥–µ–ª–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è —Å–Ω–∏–º–∞–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å.
    - –î–æ–±–∞–≤–∏—Ç—å menu —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    - –ü–µ—Ä–µ–Ω–æ—Å –¥–µ–ª –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    - –î–µ–ª–æ –Ω–∞ –¥–∞—Ç—É –∏–ª–∏ –Ω–∞ –≤—Ä–µ–º—è (—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º)
    - –•–≤–∞–ª–∏—Ç—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–ª–∞
    - –í–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å —Ü–∏—Ç–∞—Ç–∞–º–∏
    - –í–µ—Å—Ç–∏ —Å–∫–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–ª (–∫–∞–∫ –≤ —à–∞–≥–∞—Ö –≤ –í–ö)
    - –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–ª/–ø—Ä–∏–º–µ—Ä—ã –¥–µ–ª
    - –í –≥–∏—Ç—Ö–∞–± –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø


-------
–°–æ–≤–µ—Ç—ã:
–í–æ—Ç –≤—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏, —Å–∫–∞–∂–µ–º 15-20 –º–∏–Ω—É—Ç, —á—Ç–æ-—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª–∏ –Ω–æ–≤–æ–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
–º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏, –∏ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ.

–î–†—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –≤—ã –Ω–∞—á–∞–ª–∏ –¥–µ–ª–∞—Ç—å –∏ –ø–æ —Ö–æ–¥—É —É–≤–∏–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–∞—á–∞–ª–∏ –ø—Ä–∏–±–∏—Ä–∞—Ç—å —Å—Ç–æ–ª),
–∏ —É–≤–∏–¥–µ–ª–∏ —Å—Ç–æ–ø–∫—É –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã—Ö –±—É–º–∞–≥. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–µ –±—Ä–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –∑–∞ –Ω–æ–≤—ã–µ –¥–µ–ª–∞, 
–ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ —ç—Ç–æ –¥–µ–ª–æ. –õ—É—á—à–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ "–†–∞–∑–æ–±—Ä–∞—Ç —Å—Ç–æ–ø–∫—É –±—É–º–∞–≥" –∏ 
–∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–ª–æ. 

–í—ã–≥—Ä—É–∑–∫–∞ –¥–µ–ª –∏–∑ –≥–æ–ª–æ–≤—ã –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –ø—É—Ç–µ–π –∫–∞–∫ —Å–Ω–∏–∑–∏—Ç—å –ø–æ—Ç–µ—Ä—é —ç–Ω–µ—Ä–≥–∏.
–¢–∞–∫ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –±–æ–ª–µ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–º –∏ —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. 
–ù–∞–≤–µ—Ä–Ω–æ–µ –≤—ã –Ω–∞–±–ª—é–¥–∞–ª–∏ –∫–æ–≥–¥–∞ –Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–ª —Å—Ä–∞–∑—É, –∏–ª–∏ –ø–æ–º–Ω–∏—Ç—å —Å—Ä–∞–∑—É
–æ –º–Ω–æ–≥–∏—Ö –≤–µ—â–∞—Ö —ç—Ç–æ –Ω–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ–ª–æ–≤—É.

--------

XP - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª—é
    –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –Ω–∞–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
    –ï—Å–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, —Ç–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∏—Ö
    –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ —É—Ä–æ–≤–Ω—é –∏ –ø–æ —Ç–µ–º–ø—É,
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏.

    –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –≤ –õ–∏–Ω–≥–≤–∞ –õ–µ–æ –∏–ª–∏ –≤ brilliant
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è —Å–æ—Å—Ç—è–∑–∞–Ω–∏–π
    
    –£–±—Ä–∞—Ç—å —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –¥–µ–ª–æ?

–í–æ–∑–º–æ–∂–Ω–æ –∑–∞ –¥–Ω–∏ –±–µ–∑ –¥–µ–ª –ø–æ–Ω–∏–∂–∞—Ç—å score –Ω–∞ 1.


–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –±–æ—Ç:
    https://t.me/karmadev_bot

–ü—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç:
    https://t.me/karma_yoga_bot

"""

from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


import psycopg2
from psycopg2.extras import DictCursor
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from datetime import datetime, timedelta
from dateutil import parser
import uuid

import logging
import random
import re
import traceback
import pprint
from functools import wraps

from config import TOKEN, DBCONN
from middlewarebot import MiddlewareBot

# Whisper.cpp - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤–æ–π—Å–æ–≤
# from whispercpp import Whisper
# Faster-whisper
from faster_whisper import WhisperModel

from src.started_task_controller import StartedTaskController
from src.oai_embedding import SimilarTasks



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='app.log',  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
                    level=logging.DEBUG,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    format='%(asctime)s %(message)s',  # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                    datefmt='%d/%m %H:%M:%S')  # –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏


# TeleBot (–º–∏–¥–ª-–≤–∞—Ä–µ —É–º–µ–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å)
bot = MiddlewareBot(TOKEN)

# DB Postgres connection
db = psycopg2.connect(
    dbname=DBCONN['dbname'],
    user=DBCONN['user'],
    password=DBCONN['password'],
    host=DBCONN['host'],
    port=DBCONN['port']
)
db.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)

help_message = """
# üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –ë–æ—Ç! üåü

–ë–æ—Ç - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏–µ. –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ–ª–∞—Ç—å –¥–µ–ª–∞ –±–µ–∑ –æ—Ü–µ–Ω–æ–∫ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π.
–í —ç—Ç–æ–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, –≤ –ø—Ä–µ–æ–¥–æ–¥–ª–µ–Ω–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π,
–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å —Ç–æ —á—Ç–æ —Ç—ã —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—à—å.

## üîë –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –ë–æ—Ç–∞:
- **–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ**: –¢—ã —Å–∞–º –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å –¥–µ–ª–∞, –∞ –ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
- **–í–∞—à–∞ –∑–∞–¥–∞—á–∞**: –í—ã–ø–æ–ª–Ω—è–π –∏—Ö —Å –ø–æ–ª–Ω–æ–π –æ—Ç–¥–∞—á–µ–π –∏ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏–π.

_–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ: —ç—Ç–æ GTD (Getting Things Done) —Å –¥—É—Ö–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π._

### üè† *–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:*
- –î–ª—è –¥–µ–ª –ø–æ –¥–æ–º—É
- –î–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ –∂–∏–∑–Ω—å
- –î–æ–≤–µ–¥–µ–Ω–∏—è –¥–µ–ª –¥–æ –∫–æ–Ω—Ü–∞


üöÄ **–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å**:
–Ø —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª —ç—Ç–æ–≥–æ –ë–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á, –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞—á–∞—Ç–æ–≥–æ.

## –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:

## üöÄ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. **–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –î–µ–ª–æ**: –ó–∞–ø–∏—à–∏ –¥–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å. –ë–æ—Ç –∏—Ö –∑–∞–ø–æ–º–Ω–∏—Ç.
2. **–ö—Ä–∞—Ç–∫–æ—Å—Ç—å**: –î–µ–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏, —Å—Ç–∞—Ä–π—Ç–µ—Å—å –¥–µ–ª–∏—Ç—å –∏—Ö –Ω–∞ 15-30 –º–∏–Ω—É—Ç.
3. **–í—ã–±–æ—Ä –ë–æ—Ç–∞**: –ö–æ–≥–¥–∞ –µ—Å—Ç—å –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ—Å–∏ —É –ë–æ—Ç–∞ –¥–µ–ª–æ –∫–æ–º–∞–Ω–¥–æ–π `"–¥–µ–ª–æ"` /task –û–Ω –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞.
4. **–î–µ–π—Å—Ç–≤—É–π**: –ü—Ä–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–∏ –¥–µ–ª–æ —Å –ø–æ–ª–Ω–æ–π –æ—Ç–¥–∞—á–µ–π.
5. **–û—Ç—á–µ—Ç**: –°–æ–æ–±—â–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π `"–ì–æ—Ç–æ–≤–æ"` /done
6. **–û—Ç–ª–æ–∂–∏—Ç—å**: –ï—Å–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤ –∑–∞–Ω—è—Ç—å—Å—è –¥–µ–ª–æ–º —Å–µ–π—á–∞—Å, —Å–∫–∞–∂–∏ `"–û—Ç–ª–æ–∂–∏—Ç—å"` /later
7. **–°–ø–∏—Å–æ–∫ –î–µ–ª**: –£–∑–Ω–∞–π, —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ, –∫–æ–º–∞–Ω–¥–æ–π `"–°–ø–∏—Å–æ–∫"` –∏–ª–∏ /list
8. **–£–¥–∞–ª–µ–Ω–∏–µ**: –£–¥–∞–ª–∏ –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–æ–π `"—É–¥–∞–ª–∏ –Ω–æ–º–µ—Ä_–¥–µ–ª–∞"` –∏–ª–∏ /delete 123

üåü *–ö–∞–∂–¥–æ–µ –¥–µ–ª–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Ç–µ–±—è –∏ –º–∏—Ä –ª—É—á—à–µ!* üåü

/help2 - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

"""

help_advanced = """
## –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã

1. **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–ª–∞**: –£–∑–Ω–∞–π —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –∫–æ–º–∞–Ω–¥–æ–π `"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"` /history
2. **–î–µ–ª–æ –Ω–∞ –±—É–¥—É—â–µ–µ** üìÜ: –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –¥–µ–ª–æ –ø–æ—Å–ª–µ –¥–∞—Ç—ã: /–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π –¥–¥.–º–º.–≥–≥–≥–≥ —Ç–µ–∫—Å—Ç –¥–µ–ª–∞ /plan
3. **–ü–∞—É–∑–∞**: –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–ª–æ –Ω–∞ –ø–∞—É–∑—É –∫–æ–º–∞–Ω–¥–æ–π "/–ø–∞—É–∑–∞" /pause –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π "/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
4. **–î—Ä—É–≥–æ–µ –¥–µ–ª–æ**: –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤—ã –Ω–µ –≥–æ—Ç–æ–≤—ã —Å–µ–π—á–∞—Å –µ—ë –±—Ä–∞—Ç—å, –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ "/–¥—Ä—É–≥–æ–µ –¥–µ–ª–æ"  /another
5. **–ì–æ—Ç–æ–≤–æ —Å –∫–æ–º–º–µ–Ω—Ç–æ–º**: –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –∫–æ–≥–¥–∞ –¥–µ–ª–æ –≥–æ—Ç–æ–≤–æ: "/–≥–æ—Ç–æ–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
6. **–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É**: –ú–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–æ–π "/edit –Ω–æ–º–µ—Ä\_–¥–µ–ª–∞ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"

"""

# —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞

# """
# –ü—Ä–∏–º–µ—Ä—ã –¥–µ–ª:
# - –≤—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä
# - –ø–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É
# - –ø—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø—ã–ª—å
# - –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
# - –≤—ã–∫–∏–Ω—É—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
# - –ø–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã
# - 
# """

# 

def my_middleware_handler(message):
    """
    Middleware function

    Perform your actions here, e.g., logging the message
    –°–æ—Ö—Ä–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º—è –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
    """
    add_user_to_db(message.from_user)

    # –í—ã–≤–æ–¥ –≤ –ª–æ–≥ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    user_id = message.from_user.id
    username = message.from_user.username
    current_datetime = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    print(f"{current_datetime}: {user_id} {username}> {message.text}")

    # –∑–∞–ª–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—É—Ç—É—Ä—É message
    logging.info(f"{user_id} {username}: {message.text}")



# Register the middleware function
bot.middleware_handler(my_middleware_handler)


def exception_handler(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –∫–æ–º–∞–Ω–¥.
    """
    @wraps(func)
    def wrapper(message):
        try:
            return func(message)
        except Exception as e:
            short_uuid = str(uuid.uuid4())[:6]
            logging.error(
                "%s –æ—à–∏–±–∫–∞ '%s': %s",
                short_uuid,
                func.__name__,
                str(e),
                exc_info=True
            )
            bot.send_message(
                message.chat.id,
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ @agorlov\nid={short_uuid}"
            )
    return wrapper


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user_to_db(user):
    cursor = db.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT telegram_id FROM users WHERE telegram_id = %s", (user.id,))
    existing_user = cursor.fetchone()

    if not existing_user:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "INSERT INTO users (telegram_id, username, firstname, lastname) VALUES (%s, %s, %s, %s)",
            (user.id, user.username, user.first_name, user.last_name))
    else:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ lastmessage_time –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET lastmessage = NOW() WHERE telegram_id = %s", (user.id,))

    cursor.close()



def done_compliment():
    # –ü–æ—Ö–≤–∞–ª–∏—Ç—å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –¥–µ–ª–æ
    compliments = [
        "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëç",
        "–ú–æ–ª–æ–¥–µ—Ü! üëè",
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! üíØ",
        "–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏! üåü",
        "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! ‚ú®",
        "–í–ø–µ—á–∞—Ç–ª—è—é—â–µ! ü§©",
        "–ë—Ä–∞–≤–æ! üëå",
        "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™",
        "–°–ø–∞—Å–∏–±–æ! üôå",
        "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç—Ä—É–¥! üéâ",
        "–û—Ç–ª–∏—á–Ω–æ! üéâ",
        "–í–æ–∑—å–º–∏ 5-10 –º–∏–Ω—É—Ç —Ä–µ–ª–∞–∫—Å–∞",
        "–ü–æ—Ç—Ä—É–¥–∏–ª—Å—è - —Ä–∞—Å—Å–ª–∞–±—å—Å—è, —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç —ç–Ω–µ—Ä–≥–∏—é! üîã‚ö°Ô∏èüòå",
        "–°–¥–µ–ª–∞–ª –¥–µ–ª–æ - –≥—É–ª—è–π —Å–º–µ–ª–æ! üèÉ‚Äç‚ôÇÔ∏èüçÉ",
        "–ê —Ç—ã –¥–∞–≤–Ω–æ –ø–∏–ª –≤–æ–¥—É? –£—á–µ—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç 7-8 —Å—Ç–∞–∫–∞–Ω–æ–≤ —á–∏—Å—Ç–æ–π –≤–æ–¥—ã –≤ –¥–µ–Ω—å. üåä",
    ]
    return random.choice(compliments)

def update_score(user_id, points):
    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ª–∞ –∏–ª–∏ –∑–∞ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    try:
        cursor = db.cursor()
        cursor.execute(
            "UPDATE users SET karma_score = karma_score + %s WHERE telegram_id = %s",
            (points, user_id)
        )
        cursor.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤: {e}")

def user_score(user_id):
    # –°–∫–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor = db.cursor()
    cursor.execute("SELECT karma_score FROM users WHERE telegram_id = %s", (user_id,))
    result = cursor.fetchone()
    cursor.close()
    if result:
        return result[0]
    else:
        return 0  # Default score if user not found


@bot.message_handler(commands=['start'])
@exception_handler
def start_msg(message):
    bot.send_message(message.chat.id, help_message, parse_mode="Markdown")    


@bot.message_handler(
    func=lambda message: message.text.lower() == "help"
    or message.text.lower() == "/help"
    or message.text.lower() == "—Å–ø—Ä–∞–≤–∫–∞"
    or message.text.lower() == "–ø–æ–º–æ—â—å"
)
@exception_handler
def help_msg(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    """
    bot.send_message(message.chat.id, help_message, parse_mode="Markdown")

@bot.message_handler(commands=['help2'])
@exception_handler
def start_msg(message):
    bot.send_message(message.chat.id, help_advanced, parse_mode="Markdown")    



# –°–ø–∏—Å–æ–∫
@bot.message_handler(
    func=lambda message: message.text.lower() == "—Å–ø–∏—Å–æ–∫"
    or message.text.lower() == "/—Å–ø–∏—Å–æ–∫"
    or message.text.lower() == "/list"
    or message.text.lower() == "list"
)
@exception_handler
def task_list(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor = db.cursor()

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        """
        SELECT task_number, task_text, status, creation_time, planned_date
        FROM tasks
        WHERE owner_id = %s AND status IN ('–æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–≤ —Ä–∞–±–æ—Ç–µ', '–Ω–∞ –ø–∞—É–∑–µ')
        ORDER BY 
            CASE 
                WHEN status = '–≤ —Ä–∞–±–æ—Ç–µ' THEN 1
                WHEN status = '–Ω–∞ –ø–∞—É–∑–µ' THEN 2
                ELSE 3
            END, task_number
        """,
        (user_id,)
    )
    tasks = cursor.fetchall()
    cursor.close()

    score = user_score(user_id)

    if not tasks:
        response = "–í —Ç–≤–æ–µ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –¥–µ–ª... –ê –º–æ–∂–µ—Ç —Ç—ã —É–∂–µ –≤—Å–µ —Å–¥–µ–ª–∞–ª?\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –æ–Ω–æ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫!"
        bot.send_message(message.chat.id, response, parse_mode="HTML")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á        
    response = f"–ß—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —Å–¥–µ–ª–∞—Ç—å ({len(tasks)}):\n"
    for task in tasks:
        task_number, task_text, status, creation_time, planned_date = task
        creation_time = creation_time.strftime("%d.%m.%Y %H:%M:%S")            
        if status == "–≤ —Ä–∞–±–æ—Ç–µ":
            task_status = "<b>üöÄ –í –†–ê–ë–û–¢–ï</b>: "
        elif status == "–Ω–∞ –ø–∞—É–∑–µ":
            task_status = "<b>‚è∏Ô∏è –ü–ê–£–ó–ê </b>: "
        else:
            task_status = ""

        response += f"‚Ä¢ {task_status}<b>#{task_number}</b> {task_text} (–æ—Ç {creation_time})\n"

        if planned_date > datetime.now():
            response += f"    üìÜ –Ω–∞ {planned_date.strftime('%d.%m.%Y')}\n"

    response += f"\n[üèÜ <b>{score} XP</b>]"


    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, response, parse_mode="HTML")



# –°–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª
@bot.message_handler(
        func=lambda message: message.text.lower().startswith("–∞—Ä—Ö–∏–≤")
        or message.text.lower().startswith("/archive")
        or message.text.lower().startswith("/history")
        or message.text.lower().startswith("/–∞—Ä—Ö–∏–≤")
        or message.text.lower().startswith("–≥–æ—Ç–æ–≤—ã–µ")
        or message.text.lower().startswith("/–≥–æ—Ç–æ–≤—ã–µ")
        or message.text.lower().startswith("–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")
        or message.text.lower().startswith("/–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")
        or message.text.lower().startswith("–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ")
        or message.text.lower().startswith("/–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ")
)
@exception_handler
def done_list(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor = db.cursor()

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        """
        SELECT
            task_number, task_text, creation_time,
            start_time, end_time, completion_comment
        FROM tasks
        WHERE owner_id = %s AND status = '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        ORDER BY end_time DESC
        """,
        (user_id,)
    )
    tasks = cursor.fetchall()
    cursor.close()        

    if not tasks:
        response = "–í —Ç–≤–æ–µ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª.\n–î–æ–±–∞–≤—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –æ–Ω–æ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫. –ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∞–π –∫–æ–º–∞–Ω–¥—É - –≥–æ—Ç–æ–≤–æ."
    else:        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
        current_date = None
        response = ""
        for task in tasks:
            task_number, task_text, creation_time, start_time, end_time, comment = task

            time_taken = (end_time - start_time).total_seconds() / 60
            
            if current_date != end_time.strftime("%d.%m.%Y"):
                current_date = end_time.strftime("%d.%m.%Y")
                response += f"\n\n{current_date}:\n"  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞

            response += f"""
    ‚úÖ <b>#{task_number}</b> {task_text} <code>–∑–∞ {time_taken:.0f} –º–∏–Ω</code>"""

            if comment:
                response += f"""
            üí¨ {comment}
            """


    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if len(response) > 4096:
        for x in range(0, len(response), 4096):
            bot.send_message(message.chat.id, response[x:x+4096], parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, response, parse_mode="HTML")



# –æ—Ç–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á—É
@bot.message_handler(
        func=lambda message: message.text.lower() == "–æ—Ç–ª–æ–∂–∏—Ç—å"
        or message.text.lower().startswith("/cancel")
        or message.text.lower().startswith("/later")
        or message.text.lower().startswith("/–æ—Ç–ª–æ–∂–∏—Ç—å")
)
@exception_handler
def postpone_task(message):
    cursor = db.cursor()

    user_id = message.from_user.id

    # –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–≤ —Ä–∞–±–æ—Ç–µ"
    cursor.execute(
        """
        SELECT
            task_number, task_text
        FROM tasks
        WHERE status = '–≤ —Ä–∞–±–æ—Ç–µ' AND owner_id = %s
        LIMIT 1
        """,
        (user_id,)
    )
    row = cursor.fetchone()

    if row:
        task_number, task_text = row

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            """
            UPDATE tasks
            SET status = '–æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                postponement_count = postponement_count + 1,
                start_time = NULL
            WHERE task_number = %s AND owner_id = %s
            """, 
            (task_number, user_id,)
        )            

        # –ó–∞–∫—Ä–æ–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()

        update_score(user_id, -5) # -5XP

        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞
        bot.send_message(message.chat.id, 
            f"–û—Ç–ª–æ–∂–µ–Ω–∞ [üò≥ -5 XP]:\n```\n{task_text}\n```", 
            parse_mode="Markdown"
        )

    else:
        bot.send_message(message.chat.id, 
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–¥–∞—á '–≤ —Ä–∞–±–æ—Ç–µ' –Ω–µ—Ç."
        )


# –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É
@bot.message_handler(
        func=lambda message: message.text.lower() == "–ø–∞—É–∑–∞"
        or message.text.lower().startswith("/–ø–∞—É–∑–∞")
        or message.text.lower() == "/pause"
)
@exception_handler
def pause_task(message):

    cursor = db.cursor()

    user_id = message.from_user.id

    # –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–≤ —Ä–∞–±–æ—Ç–µ"
    cursor.execute(
        """
        SELECT
            task_number, task_text
        FROM tasks
        WHERE status = '–≤ —Ä–∞–±–æ—Ç–µ' AND owner_id = %s
        LIMIT 1
        """,
        (user_id,)
    )
    row = cursor.fetchone()

    if not row:
        bot.send_message(message.chat.id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–¥–∞—á '–≤ —Ä–∞–±–æ—Ç–µ' –Ω–µ—Ç.")
        return

    task_number, task_text = row

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        """
        UPDATE tasks
        SET status = '–Ω–∞ –ø–∞—É–∑–µ',
            start_time = NULL
        WHERE task_number = %s AND owner_id = %s
        """,
        (task_number, user_id,)
    )
    cursor.close()

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞
    bot.send_message(
        message.chat.id,
        f"–ù–∞ –ø–∞—É–∑–µ:\n```\n{task_text}\n```",
        parse_mode="Markdown"
    )


def done_current_task(user_id, chat_id, completion_comment=None):
    """
    –û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    cursor = db.cursor()

    # –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–≤ —Ä–∞–±–æ—Ç–µ"
    cursor.execute(
        """
        SELECT
            task_number, task_text, start_time
        FROM tasks
        WHERE status in ('–≤ —Ä–∞–±–æ—Ç–µ', '–Ω–∞ –ø–∞—É–∑–µ') AND owner_id = %s
        LIMIT 1
        """,
        (user_id,)
    )
    row = cursor.fetchone()

    if row:
        task_number, task_text, start_time = row

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            """
            UPDATE tasks 
            SET
                status = '–∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                end_time = NOW(),
                completion_comment = %s
            WHERE task_number = %s AND owner_id = %s
            """,
            (completion_comment, task_number, user_id,)
        )
        cursor.close()

        end_time = datetime.now()

        time_taken = (end_time - start_time).total_seconds() / 60

        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞
        update_score(user_id, 15)


        # –ö–Ω–æ–ø–∫–∏:
        markup = types.InlineKeyboardMarkup(row_width=3)
        btn1 = types.InlineKeyboardButton('–í–∑—è—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ', callback_data='new_task')
        btn2 = types.InlineKeyboardButton(
            '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ', callback_data='plan_task_' + str(task_number)
        )
        markup.add(btn1, btn2)

        bot.send_message(
            chat_id,
            f"{done_compliment()} [‚ú® +15 XP], –∑–∞ {time_taken:.0f} –º–∏–Ω",
            parse_mode="Markdown",
            reply_markup=markup
        )

    else:
        bot.send_message(
            chat_id,
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Ä–∞–±–æ—Ç–µ –∑–∞–¥–∞—á –Ω–µ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫? /list"
        )



# –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
@bot.message_handler(
        func=lambda message: message.text.lower().startswith("–≥–æ—Ç–æ–≤–æ")
        or message.text.lower().startswith("/done")
        or message.text.lower().startswith("/–≥–æ—Ç–æ–≤–æ")
        or message.text.lower().startswith("/—Å–¥–µ–ª–∞–ª")
        or message.text.lower().startswith("—Å–¥–µ–ª–∞–ª")
        or message.text.lower().startswith("/—Å–¥–µ–ª–∞–ª–∞")
        or message.text.lower().startswith("—Å–¥–µ–ª–∞–ª–∞")
        or message.text.lower().startswith("/—Å–¥–µ–ª–∞–ª–∞–Ω–æ")
        or message.text.lower().startswith("—Å–¥–µ–ª–∞–ª–∞–Ω–æ")
)
@exception_handler
def done_task(message):

    user_id = message.from_user.id
    text = message.text
    chat_id = message.chat.id

    try:
        command, completion_comment = text.split(maxsplit=1)
    except ValueError as e:
        completion_comment = None

    done_current_task(user_id, chat_id, completion_comment=completion_comment)



@bot.callback_query_handler(func=lambda call: call.data == 'new_task')
def btn_answer_new_task(call):   
    try:
        bot.answer_callback_query(callback_query_id=call.id, text="–û–∫, –º–∏–Ω—É—Ç–∫—É..")
        started_task = StartedTaskController(
            db,
            bot,
            call.message.chat.id,
            call.from_user.id
        )
        started_task.startTask()
    except Exception as e:
        bot.send_message(
            call.message.chat.id, 
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '–¥–µ–ª–æ': {e}\n{traceback.format_exc()}"
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('plan_task'))
def btn_answer_plan_task(call):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id = call.from_user.id

        planned_date = datetime.now() + timedelta(days=1)
        task_id = call.data.split('_')[2]

        # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É —Å task_id
        cursor = db.cursor()
        cursor.execute(
            "SELECT task_text FROM tasks WHERE task_number = %s AND owner_id = %s",
            (task_id, user_id)
        )
        task_text = cursor.fetchone()[0]
        cursor.close()
        
        cursor = db.cursor()
        cursor.execute(
            "INSERT INTO tasks (owner_id, status, task_text, planned_date) VALUES (%s, %s, %s, %s)",
            (user_id, '–æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', task_text, planned_date.strftime("%Y-%m-%d %H:%M:%S"))
            
        )
        cursor.close()


        update_score(user_id, 5) # +5XP
       
        bot.send_message(
            call.message.chat.id,
            f"–ì–æ—Ç–æ–≤–æ üëç +5 XP:\n```\n{task_text}\n```",
            parse_mode="Markdown"
        )

        # –°–æ—Ö—Ä–∞–Ω–∏–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–¥–∞—á–∏ (—Å–º—ã—Å–ª–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞—á)
        task_emb = OAIEmbedding()
        task_emb.save_for_task(self, task_id, user_id, task_text, db)

    except Exception as e:
        bot.send_message(
            call.message.chat.id, 
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '–¥–µ–ª–æ': {e}\n{traceback.format_exc()}"
        )





# –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É (–∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –Ω–∞ –ø–∞—É–∑–µ)
@bot.message_handler(
    func=lambda message: message.text.lower() == "–¥–µ–ª–æ" 
    or message.text.lower().startswith("/–¥–µ–ª–æ")
    or message.text.lower() == "/task"
    or message.text.lower() == "/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    or message.text.lower() == "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
)
@exception_handler
def start_task(message):
    started_task = StartedTaskController(db, bot, message.chat.id, message.from_user.id)
    started_task.startTask()

@bot.callback_query_handler(func=lambda call: call.data == 'done_task_btn')
def btn_done_task(call):
    """
    –ö–Ω–æ–ø–∫–∞ –ì–æ—Ç–æ–≤–æ –∑–∞–¥–∞—á–∏
    """
    done_current_task(call.from_user.id, call.message.chat.id)


@bot.message_handler(
        func=lambda message: message.text.lower() == "–¥—Ä—É–≥–æ–µ –¥–µ–ª–æ"
        or message.text.lower().startswith("/–¥—Ä—É–≥–æ–µ –¥–µ–ª–æ")
        or message.text.lower().startswith("/another")
)
@exception_handler
def other_task(message):

    cursor = db.cursor()

    user_id = message.from_user.id

    # –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–≤ —Ä–∞–±–æ—Ç–µ"
    cursor.execute(
        """
        SELECT
            task_number, task_text
        FROM tasks
        WHERE status = '–≤ —Ä–∞–±–æ—Ç–µ' AND owner_id = %s
        LIMIT 1
        """,
        (user_id,)
    )
    row = cursor.fetchone()

    if not row:
        bot.send_message(message.chat.id, 
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–¥–∞—á '–≤ —Ä–∞–±–æ—Ç–µ' –Ω–µ—Ç."
        )
        return

    task_number, task_text = row

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        """
        UPDATE tasks
        SET status = '–æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
            postponement_count = postponement_count + 1,
            start_time = NULL
        WHERE task_number = %s AND owner_id = %s
        """, 
        (task_number, user_id,)
    )            

    cursor.close()

    update_score(user_id, -5) # -5XP

    bot.send_message(message.chat.id, 
        f"–û—Ç–ª–æ–∂–µ–Ω–∞ [üò≥ -5 XP]:\n```\n{task_text}\n```", 
        parse_mode="Markdown"
    )

    # –í—ã–±–æ—Ä –¥—Ä—É–≥–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor = db.cursor()
    cursor.execute(
        """
        SELECT task_number, task_text
        FROM tasks
        WHERE status IN ('–æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        AND owner_id = %s
        AND planned_date <= NOW()
        AND task_number != %s
        ORDER BY RANDOM()
        LIMIT 1
        """,
        (user_id, task_number,)
    )
    new_task = cursor.fetchone()

    if not new_task:
        bot.send_message(
            message.chat.id, 
            "–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–¥–∞—á–∏, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤–æ–µ –¥–µ–ª–æ."
        )        
        return
    
    new_task_number, new_task_text = new_task

    cursor.execute(
        "UPDATE tasks SET status = '–≤ —Ä–∞–±–æ—Ç–µ', start_time = NOW() WHERE task_number = %s AND owner_id = %s", 
        (new_task_number, user_id,)
    )
    cursor.close()        

    bot.send_message(message.chat.id, 
        f"–í–æ—Ç –Ω–æ–≤–æ–µ –¥–µ–ª–æ:\n```\n{new_task_text}\n```", 
        parse_mode="Markdown"
    )


@bot.message_handler(
        func=lambda message: message.text.lower().startswith("—É–¥–∞–ª–∏")
        or message.text.lower().startswith("/—É–¥–∞–ª–∏")
        or message.text.lower().startswith("/delete")
)
@exception_handler
def delete_task(message):

    match = re.search(r'(\d+)', message.text.lower())  # –ü–æ–∏—Å–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–µ–ª–∞
    if match:
        task_number = int(match.group(1))
    else:
        bot.send_message(
            message.chat.id,
            f"–ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –¥–µ–ª–∞ (–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /list –∏–ª–∏ '—Å–ø–∏—Å–æ–∫')"
        )
        return
    
    cursor = db.cursor()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É owner_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tasks, —á—Ç–æ–±—ã –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª id
    # —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º
    cursor.execute("DELETE FROM tasks WHERE task_number = %s AND owner_id = %s", 
                    (task_number, message.from_user.id))
    # db.commit()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –¥–µ–ª–∞
    bot.send_message(message.chat.id, f"–î–µ–ª–æ —Å –Ω–æ–º–µ—Ä–æ–º {task_number} —É–¥–∞–ª–µ–Ω–æ.")



@bot.message_handler(
        func=lambda message: message.text.lower().startswith("/–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π")
        or message.text.lower().startswith("–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π")
        or message.text.lower().startswith("/plan")
)
@exception_handler
def delayed_task_msg(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id


    try:
        command, date_str, *task_text_parts = message.text.split(maxsplit=2)
        task_text = ' '.join(task_text_parts)
        planned_date = parser.parse(date_str, dayfirst=True)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫ /–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π –¥–¥.–º–º.–≥–≥–≥–≥ —Ç–µ–∫—Å—Ç_–¥–µ–ª–∞_–∫–æ—Ç–æ—Ä–æ–µ_–Ω—É–∂–Ω–æ_–≤—ã–ø–æ–ª–Ω–∏—Ç—å\n{e}"
        )
        return
        

    cursor = db.cursor()
    cursor.execute(
        "INSERT INTO tasks (owner_id, status, task_text, planned_date) VALUES (%s, %s, %s, %s)",
        (user_id, '–æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', task_text, planned_date)
    )
    cursor.close()


    update_score(user_id, 5) # +5XP
    
    formatted_date = planned_date.strftime("%d.%m.%Y")
    days_until = (planned_date - datetime.now()).days
    bot.send_message(
        message.chat.id,
        f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –Ω–∞ üìÜ {formatted_date} üëç +5 XP:\n```\n{task_text}\n```\n—á–µ—Ä–µ–∑ **{days_until} –¥–Ω–µ–π**",
        parse_mode="Markdown"
    )

    # –°–æ—Ö—Ä–∞–Ω–∏–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–¥–∞—á–∏ (—Å–º—ã—Å–ª–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞—á)
    task_emb = OAIEmbedding()
    task_emb.save_for_task(self, task_id, user_id, task_text, db)



# –ò–¥–µ—è: –µ—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç —Å –∑–∞–¥–∞–Ω–∏–µ–º, —Ç–æ —ç—Ç–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    
# –ö–æ–º–∞–Ω–¥–∞ /edit 33 –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
@bot.message_handler(commands=['edit'])
@exception_handler
def edit_msg(message):

    match = re.search(r'(\d+)\s+(.+)', message.text)  # –ü–æ–∏—Å–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–µ–ª–∞
    if match:
        task_number = int(match.group(1))
        task_text = match.group(2)
    else:
        bot.send_message(
            message.chat.id,
            f"–ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –¥–µ–ª–∞ (–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /list –∏–ª–∏ '—Å–ø–∏—Å–æ–∫')"
        )
        return
    
    cursor = db.cursor()

    # –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–≤ —Ä–∞–±–æ—Ç–µ"
    cursor.execute(
        """
        SELECT
            task_number, task_text
        FROM tasks
        WHERE status = '–æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è' AND owner_id = %s AND task_number = %s
        LIMIT 1
        """,
        (message.from_user.id, task_number)
    )
    row = cursor.fetchone()

    if row:
        task_number, src_task_text = row
    else:
        bot.send_message(message.chat.id, 
            f"–ù–µ –Ω–∞—à–ª–∏ –¥–µ–ª–æ —Å –Ω–æ–º–µ—Ä–æ–º {task_number} –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö."
        )
        return


    # –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ–ª–æ –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ —Ç–∞–±–ª–∏—Ü–µ tasks, –ø–æ –∫–æ–ª–æ–Ω–∫–µ task_id –∏ owner_id

    cursor.execute(
        "UPDATE tasks SET task_text = %s WHERE owner_id = %s AND task_number = %s",
        (task_text, message.from_user.id, task_number)
    )
    cursor.close()
    bot.send_message(
        message.chat.id,
        f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ #{task_number}:\n```\n–±—ã–ª–æ: {src_task_text}\n—Å—Ç–∞–ª–æ: {task_text}\n```",
        parse_mode="Markdown"
    )



@bot.message_handler()
@exception_handler
def new_task_msg(message):
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–ª–æ
    add_task(message.chat.id, message.from_user.id, message.text, message.message_id)


def add_task(chat_id, user_id, task_text, telegram_message_id):
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–ª–æ
        
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor = db.cursor()

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    cursor.execute(
        """
        INSERT INTO tasks (
            telegram_message_id,
            owner_id,
            status,
            task_text,
            planned_date
        ) 
        VALUES (%s,%s, %s, %s, NOW())
        RETURNING task_number;
        """,
        (telegram_message_id, user_id, '–æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', task_text)
    )
    
    task_number = cursor.fetchone()[0]
    cursor.close()

    update_score(user_id, 5) # +5XP

    bot.send_message(
        chat_id,
        f"–ó–∞–ø–∏—Å–∞–ª #{task_number} üëç +5 XP"
    )

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor.close()

    # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö
    sim = SimilarTasks(db, user_id)
    sim_list = sim.similar(task_text)

    if sim_list:
        tasks_str = '\n'.join([f"#{task_number} {task_text}" for task_number, task_text in sim_list])
        bot.send_message(
            chat_id,
            f"üîé –û—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏ (—É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /delete –Ω–æ–º–µ—Ä):\n{tasks_str}"
        )



from multiprocessing import Process

@bot.message_handler(content_types=['voice'])
@exception_handler
def voice_msg(message):
    user_id = message.from_user.id
    file_info = bot.get_file(message.voice.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    with open(f"voice_task_{user_id}.ogg", 'wb') as new_file:
        new_file.write(downloaded_file)
    
    bot.send_message(message.chat.id, f"Voice –ø—Ä–∏–Ω—è—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... (–∑–∞–π–º–µ—Ç 15-20 —Å–µ–∫—É–Ω–¥) üéô")

    p = Process(
        target=process_voice,
        args=(f"voice_task_{user_id}.ogg", user_id, message.chat.id, message.message_id)
    )
    p.start()

def process_voice(file_name: str, user_id, chat_id, message_id) -> None:
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–π—Å–∞ –≤ process_voice...")
    whisper = WhisperModel(
        'small', # medium –Ω–µ –≤–ª–µ–∑–ª–∞ –≤ 2–ì–± –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ :(
        device="cpu",
        compute_type="int8",
        download_root="./models"
    )
    
    segments, info = whisper.transcribe(
        file_name,
        beam_size=5,
        language='ru',
        initial_prompt=""
    )
    
    task_text = "\n".join([segment.text for segment in segments])

    add_task(chat_id, user_id, "üé§ " + task_text, message_id)

    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–π—Å–∞ –≤ process_voice –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# library: whispercpp (git+https://github.com/agorlov/whispercpp.py)
# def process_voice(file_name, user_id):
#     print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–π—Å–∞ –≤ process_voice...")
#     # w = Whisper('small')
#     w = Whisper('small-q5_0')
#     result = w.transcribe(file_name)
#     text = w.extract_text(result)
#     bot.send_message(user_id, f"```{text}```")
#     print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–π—Å–∞ –≤ process_voice –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


@bot.edited_message_handler(content_types=['text'])
@exception_handler
def handle_edited_message(message):

    message_id = message.message_id
    # –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ–ª–æ –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ —Ç–∞–±–ª–∏—Ü–µ tasks, –ø–æ –∫–æ–ª–æ–Ω–∫–µ task_id –∏ owner_id
    cursor = db.cursor()
    cursor.execute(
        "UPDATE tasks SET task_text = %s WHERE owner_id = %s AND telegram_message_id = %s",
        (message.text, message.from_user.id, message_id)
    )
    cursor.close()
    bot.send_message(
        message.chat.id,
        f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ:\n```\n{message.text}\n```",
        parse_mode="Markdown"
    )


                     
    

# –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram
bot.polling()



print("Bot —Å–ª—É—à–∞–µ—Ç...")
bot.polling(non_stop=True)