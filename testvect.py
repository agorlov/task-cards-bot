"""
Поиск схожих дел по векторам с эмбединнгами
"""

import numpy as np
from openai import OpenAI
from config import OPENAI_API_KEY

oai = OpenAI(api_key=OPENAI_API_KEY, base_url="https://openai.a505.ru/v1")


texts = [
    "За 3 дела подряд давать повышенный бонус XP (от 14.02.2024 20:04:16)",
    "Поискать вдохновляющие фразы и идиомы для hello.py (от 18.02.2024 14:03:53)",
    "Разобрать вкладки в Sublimetext (от 18.02.2024 19:42:38)",
    "субботник (от 20.02.2024 19:38:51)",
    "Посмотреть видео про Мульти-агентность: https://www.youtube.com/watch?v=l00ZB2ZaVO0 (от 21.02.2024 20:47:04)",
    "продолжить обработку голосовых сообщений whisper.cpp (от 21.02.2024 20:54:42)",
    "подключить обогреватель в душевой через умную розетку, для прогрева помещения утром дистанционно (от 23.02.2024 10:36:14)",
    "Выводить текст комментариев завершенных дел. (от 23.02.2024 12:00:19)",
    "Подумать на тему: после нескольких дел, или после какой-то продолжительности выполненных дел - предлагать конкретные способы релакса. (от 23.02.2024 12:12:00)",
    "Когда буду подключать GPT - сделать проверку не пытаемся ли добавить дело, которое уже есть в списке (от 23.02.2024 13:42:51)",
    "Поискать пленку для окон и новые жалюзи или занавеску с карнизом (от 23.02.2024 13:43:21)",
    "Посмотреть игровую тему HTML5 в telegram: https://core.telegram.org/bots/games (от 23.02.2024 15:16:56)",
    "Тему бризеров/вент установок/вентиляции поднять для спальни и кабинета - почитать какие решения есть. (от 24.02.2024 05:30:31)",
    "В Боте Анна, настроить, чтоб он не употреблял фразу \"но не забудь\" (от 24.02.2024 05:42:15)",
    "Идея бота для обучения быстрому чтению идеально ложится на LLM. Он может давать тексты, мерить скорость проверять на сколько текст воспринят (от 24.02.2024 06:17:05)",
    "Whisper (audio2text) Протестировать квантованую q4 или q5 модель small и medium (от 24.02.2024 06:47:13)",
    "Придумать, какие блоки должны быть на сайте Грейт-Гардарики (минимально необходимые) (от 24.02.2024 11:47:39)",
    "Архив (от 24.02.2024 19:59:22)",
    "Ознакомиться с PEP-8, найти его на русском: https://peps.python.org/pep-0008/#imports (от 25.02.2024 10:56:33)",
    "Зарефакторить и вынести в виде отдельных команд все остальные по аналогии с StartedTaskController (от 25.02.2024 12:10:18)",
    "Подумать над переименованием, т.к. Karma Yoga Bot очень специфичное и не понятное большинству название (от 25.02.2024 12:10:45)",
    "Бот для проведения теста на знание английского, от простого к сложному (от 01.03.2024 05:29:58)",
    "Закупить два балона кемпинг-газа (от 01.03.2024 06:12:40)",
    "Заменить фильтр входной (от 01.03.2024 06:18:23)",
    "Почитать про Notcoin - для вознаграждения пользователей (от 01.03.2024 07:43:31)",
    "Заказать полотенце-сушитель. Или посмотреть какие крепления для старого полотенцесушителя (от 02.03.2024 06:22:01)",
    " третья попытка записать voice проверяем вот запись дела таким способом (от 03.03.2024 11:48:31)",
    " купить цветы для жены (от 03.03.2024 11:52:57)",
    " Подумать на тему применить G5 для категоризации отдела. (от 03.03.2024 11:54:13)",
    " Сделать редактирование дел, особенно после записи войсом. (от 03.03.2024 12:03:28)",
    " Настроить реакцию, на нажатие кнопки взять следующее после выполненного дела. (от 03.03.2024 12:06:33)",
    "исправить  баг: \"слишком длинное сообщение\" - сейчас срабатывает на команду архив (от 03.03.2024 19:40:17)",
    "Купить витамин D (от 07.03.2024 07:00:40)",
    "Запланировать 01.09.2024 приём витамина D (от 07.03.2024 11:30:23)",
    "Добавить справку в меню бота (от 07.03.2024 11:31:24)",
    "Запустить бота на втором имени и придумать имя (от 07.03.2024 11:32:05)",
    "Продолжить интеграцию с ChatGPT, см. скрипт testopenai.py: https://platform.openai.com/docs/quickstart?context=python (от 07.03.2024 20:18:25)",
]

embeddings = []


def oai_embedding(text: str) -> np.ndarray:
    """Вычисляет эмбединг текста с помощью OpenAI API."""
    response = oai.embeddings.create(input=text, model="text-embedding-ada-002")
    return np.array(response.data[0].embedding)

def cosine_similarity(a, b):
    """Вычисляет косинусное сходство между двумя векторами."""
    return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))

def find_similar_cases(new_case_embedding, existing_cases_embeddings, threshold=0.8):
    """
    Ищет существующие дела, похожие на новое дело.
    
    :param new_case_embedding: Эмбеддинг нового дела.
    :param existing_cases_embeddings: Список эмбеддингов существующих дел.
    :param threshold: Порог сходства для определения похожести.
    :return: Список индексов похожих дел.
    """
    similar_cases = []
    for i, existing_embedding in enumerate(existing_cases_embeddings):
        similarity = cosine_similarity(new_case_embedding, existing_embedding)
        if similarity > threshold:
            similar_cases.append(i)
    return similar_cases



print(oai_embedding(texts[1]))
