import datetime
from datetime import datetime
from telebot import types

from .user_score import UserScore
from .done_compliment import DoneCompliment
from .basic_keyboard import BasicKeyboard

class DoneTask:
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞–µ—Ç–ª—è
    """

    def __init__(self, db, bot, user_id) -> None:
        self.db = db
        self.bot = bot
        self.user_id = user_id
        self.user_score = UserScore(user_id, db)
        self.basic_keyboard = BasicKeyboard()


    def done_task(self, chat_id, completion_comment=None):
        """
        –û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        :param chat_id: ID —á–∞—Ç–∞
        :param completion_comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
        """
        
        cursor = self.db.cursor()

        # –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–≤ —Ä–∞–±–æ—Ç–µ"
        cursor.execute(
            """
            SELECT
                task_number, task_text, start_time
            FROM tasks
            WHERE status in ('–≤ —Ä–∞–±–æ—Ç–µ', '–Ω–∞ –ø–∞—É–∑–µ') AND owner_id = %s
            LIMIT 1
            """,
            (self.user_id,)
        )
        row = cursor.fetchone()

        if row:
            task_number, task_text, start_time = row

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute(
                """
                UPDATE tasks 
                SET
                    status = '–∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                    end_time = NOW(),
                    completion_comment = %s
                WHERE task_number = %s AND owner_id = %s
                """,
                (completion_comment, task_number, self.user_id,)
            )
            cursor.close()

            end_time = datetime.now()

            time_taken = (end_time - start_time).total_seconds() / 60

            
            today_count = len(self.done_today())
            # –µ—Å–ª–∏ today_count –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 3 (–∫–æ–º–±–æ –∏–∑ 3—Ö –∑–∞–¥–∞—á), —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–ª—ã –Ω–∞ 15
            if today_count % 3:
                bonus_str = "‚ú®"
                bonus = 15
            else:
                bonus_str = "‚ú®3x –ö–û–ú–ë–ûüöÄ" 
                bonus = 30

            self.user_score.update_score(bonus)

            # –ö–Ω–æ–ø–∫–∏:
            markup = types.InlineKeyboardMarkup(row_width=3)
            btn1 = types.InlineKeyboardButton('–í–∑—è—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ', callback_data='new_task')
            btn2 = types.InlineKeyboardButton(
                '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ', callback_data='plan_task_' + str(task_number)
            )
            markup.add(btn1, btn2)

            done_compliment = DoneCompliment().compliment()

            self.bot.send_message(
                chat_id,
                f"{done_compliment} [{bonus_str} +{bonus} XP], –∑–∞ {time_taken:.0f} –º–∏–Ω",
                parse_mode="Markdown",
                reply_markup=markup
            )

        else:
            self.bot.send_message(
                chat_id,
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Ä–∞–±–æ—Ç–µ –∑–∞–¥–∞—á –Ω–µ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫? /list",
                reply_markup=self.basic_keyboard.menu()
            )

    def done_today(self):
        """
        –°–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        """
        cursor = self.db.cursor()

        today = datetime.now().strftime("%Y-%m-%d")
        
        cursor.execute(
            """
            SELECT
                task_number, task_text, completion_comment
            FROM tasks
            WHERE owner_id = %s AND status = '–∑–∞–≤–µ—Ä—à–µ–Ω–∞' AND date(end_time) = %s
            """,
            (self.user_id, today)
        )

        return cursor.fetchall()            